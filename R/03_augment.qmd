---
title: "03_augment"
format: html
editor: visual
---

### Loading packages

```{r}
#| message: false
library(tidyverse)
```

### Loading the data

```{r}
#| message: false
placental_gene_expr <- read_tsv("../data/02_dat_clean.tsv")
```

### Creating BMI classes, and dividing the mothers

```{r}
#| eval: true
#| echo: true

# Dividing BMI into seven classes
placental_gene_expr <- placental_gene_expr |> 
  # Making the conversion table code
  mutate(bmi_class = case_when(maternal_bmi < 16.5 ~ "Severely underweight",
                               16.5 <= maternal_bmi & maternal_bmi < 18.5 ~ "Underweight",
                               18.5 <= maternal_bmi & maternal_bmi < 24.9 ~ "Normal weight",
                               24.9 <= maternal_bmi & maternal_bmi < 30 ~ "Overweight",
                               maternal_bmi >= 30 & maternal_bmi < 35 ~ "Obesity class I",
                               maternal_bmi >= 35 & maternal_bmi < 40 ~ "Obesity class II",
                               maternal_bmi >= 40 ~ "Obesity class III")) |>
  # Adding it as column in placental_gene_expr
  mutate(bmi_class = factor(bmi_class,
                            levels = c("Severely underweight",
                                       "Underweight",
                                       "Normal weight", 
                                       "Overweight",
                                       "Obesity", 
                                       "Obesity class I",
                                       "Obesity class II", 
                                       "Obesity class III"))) |>
  relocate(bmi_class,
           .after = maternal_bmi) #Moving the column bmi_class to the correct place and divided as we want. 
```

### Dividing the mothers into age groups

```{r}
placental_gene_expr <- placental_gene_expr |> 
  # Dividing the different patients into age_groups (10,20], (20,30], (30,40], (40,50]
  mutate(age_group = cut(age_years,
                         breaks = c(10,
                                    20,
                                    30,
                                    40,
                                    50))) |>
  relocate(age_group,
           .after = age_years) #Adding age_group column after age_years column
```

### Converting status to numeric values

```{r}
placental_gene_expr_clean_aug <- placental_gene_expr |> 
  #Creating a new column that converts status into numeric values
  mutate(y = case_when(
    status == "smoker" ~ 1,
    status == "non-smoker" ~ 0)) |> 
  relocate(status_num = y)
```

### Creating table with log2-fold-change and p-values

```{r}
#| message: false
# Extract genedata from placental_gene_expr
gene_cols <- grep("^ilmn",
                  names(placental_gene_expr),
                  value = TRUE)

placental_gene_expr_log2_fold <- placental_gene_expr |>
  group_by(status) |> 
  # Calculate the mean value for expression levels, for each gene, divided into smoker and non-smoker
  summarise(across(all_of(gene_cols),
                   mean, na.rm = TRUE)) |> 
  pivot_longer(cols = -status,
               names_to = "gene",
               values_to = "mean_expr") |> 
  pivot_wider(names_from = status, 
  #Calculate the log2_fold_change for each gene             
              values_from = mean_expr) |> 
  mutate(log2_fold_change = log2(`smoker` / `non-smoker`))
placental_gene_expr_log2_fold

p_values <- placental_gene_expr |>
  pivot_longer(cols = all_of(gene_cols),
               names_to = "gene",
               values_to = "expression") |>
  #Calculate the p-value for each gene 
  group_by(gene) |> 
  summarise(p_value = t.test(expression ~ status)$p.value)

#Combine log2_fold_values and p-values into table 
placental_gene_expr_log2_fold <- placental_gene_expr_log2_fold |> 
  left_join(p_values, by = "gene")

# Categorizing genes as upregulated or downregulated based on log2_fold_change
placental_gene_expr_log2_fold <- placental_gene_expr_log2_fold |>
  mutate(Regulation = case_when(
    log2_fold_change > 0 ~ "Upregulated",
    log2_fold_change < 0 ~ "Downregulated")) |>
  mutate(Significance = case_when(
    p_value < 0.05 ~ "Significant",
    p_value > 0.05 ~ "Not significant"
  ))
```

### Saving the data in a tsv file

```{r}
# Save the merged dataset to a tsv file
write_tsv(placental_gene_expr,
          file = "../data/03_dat_augment_placental_gene_expr.tsv")

# Save the merged log2 fold dataset to a tsv file
write_tsv(placental_gene_expr_log2_fold,
          file = "../data/03_dat_augment_log2_fold.tsv")

# Save the merged clean dataset to a tsv file
write_tsv(placental_gene_expr_clean_aug,
          file = "../data/03_dat_augment_placental_gene_expr_clean_aug.tsv")
```
