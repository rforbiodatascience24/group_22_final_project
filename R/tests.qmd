---
title: "tests"
format: html
editor: visual
---

### Loading libraries

```{r}
#| message: false
library(tidyverse)
library(broom)
```

### Download data

```{r}
merged_clean_aug <- read_tsv("../data/03_dat_augment_merged_clean_aug.tsv")
```

### Creating a table with status, gene names and log2 expression levels

```{r}
#Transforming the data to a long format to prepare it for analysis
merged_clean_aug_long <- merged_clean_aug |> 
  select(status_num, starts_with("ilmn")) |>                      #Selecting relevant columns
  pivot_longer(cols = starts_with("ilmn"),                        #Specifying which columns to be pivot
               names_to = "gene",                                 #Making a new column to store the gene names
               values_to = "expr_level"                           #Making a new column to store the corresponding expression levels in
               ) |> 
  mutate(log2_expr = log2(expr_level))                            #

merged_clean_aug_long <- merged_clean_aug_long |> 
  select(status_num,gene,log2_expr)

print(merged_clean_aug_long)



```

#### Creating a table with gene names and a data column containing status and log2 expression level for each gene

```{r}
merged_clean_aug_long_nested <- merged_clean_aug_long |> 
  group_by(gene) |> 
  nest() |>  
  ungroup()

merged_clean_aug_long_nested
```


```{r}
merged_clean_aug_long_nested |>
  filter(gene == "ilmn_1343291") |> 
  pull(data)
```

#### Creating a column with a model_object column

```{r}
merged_clean_aug_long_nested <- merged_clean_aug_long_nested |> 
  group_by(gene) |> 
  mutate(model_object = map(.x = data,
                   .f = ~lm(formula = log2_expr ~ status_num,
                            data = .x)))
merged_clean_aug_long_nested
```


```{r}
merged_clean_aug_long_nested |>
  
  filter(gene == "ilmn_1343293") |> 
  
  # Pull() on tibbles: This pulls out the model_object variable.
  #   Note! This is a list, because we nested!
  pull(model_object) |> 
  
  # Pluck() on lists: From the list we got from the last step,
  #   we "pluck" the first element
  pluck(1) |>
  
  # The result of pluck, is a model object,
  #   upon which we can call the tidy function
  tidy(conf.int = TRUE,
       conf.level = 0.95)
```
