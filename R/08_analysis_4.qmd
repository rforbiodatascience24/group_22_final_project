---
title: "08_analysis_4"
format: html
editor: visual
---

# Linear regression for genes associated with smoking

## Error bar plot and Vulcano plot

Since no significant q-values were found in 07_analysis_3, we decided to look at significant p-values instead.

```{r}
library(tidyverse)
library(broom)
```

#### Creating a table with status, gene names and log2 expression levels

```{r}
#Transforming the data to a long format to prepare it for analysis
merged_clean_aug_long <- merged_clean_aug |> 
  select(status_num, starts_with("ilmn")) |>                      #Selecting relevant columns
  pivot_longer(cols = starts_with("ilmn"),                        #Specifying which columns to be pivot
               names_to = "gene",                                 #Making a new column to store the gene names
               values_to = "expr_level"                           #Making a new column to store the corresponding expression levels in
               ) |> 
  mutate(log2_expr = log2(expr_level))                            #

merged_clean_aug_long <- merged_clean_aug_long |> 
  select(status_num,gene,log2_expr)

print(merged_clean_aug_long)



```

#### Creating a table with gene names and a data column containing status and log2 expression level for each gene

```{r}
merged_clean_aug_long_nested <- merged_clean_aug_long |> 
  group_by(gene) |> 
  nest() |>  
  ungroup()

merged_clean_aug_long_nested
```

```{r}
merged_clean_aug_long_nested |>
  filter(gene == "ilmn_1343291") |> 
  pull(data)
```

#### Creating a column with a model_object column

```{r}
merged_clean_aug_long_nested <- merged_clean_aug_long_nested |> 
  group_by(gene) |> 
  mutate(model_object = map(.x = data,
                   .f = ~lm(formula = log2_expr ~ status_num,
                            data = .x)))
merged_clean_aug_long_nested
```

### Maybe delete?

```{r}
merged_clean_aug_long_nested |>
  
  # Here, you should replace "g2E09" with whatever was YOUR favourite gene!
  filter(gene == "ilmn_1343293") |> 
  
  # Pull() on tibbles: This pulls out the model_object variable.
  #   Note! This is a list, because we nested!
  pull(model_object) |> 
  
  # Pluck() on lists: From the list we got from the last step,
  #   we "pluck" the first element
  pluck(1) |>
  
  # The result of pluck, is a model object,
  #   upon which we can call the tidy function
  tidy(conf.int = TRUE,
       conf.level = 0.95)
```

#### Creating a column with model_object_tidy

```{r}
merged_clean_aug_long_nested <- merged_clean_aug_long_nested |> 
  mutate(model_object_tidy = map(.x = model_object, #specifies that the function will be applied to the model_object column
                                 .f = ~tidy(x = .x, # The x argument refers to the current model object being processed from the model_object column
                                            conf.int = TRUE, #include confidence intervals 
                                            conf.level = 0.95)))
merged_clean_aug_long_nested
```

#### Unnest the model_object_tidy column

```{r}
merged_estimates <- merged_clean_aug_long_nested |> 
  unnest(model_object_tidy)

merged_estimates
```

#### Filter, Select, and Convert Data Types for Gene Expression Estimates

```{r}
merged_estimates <- merged_estimates |> 
  filter(term == "status_num") |> 
  select(gene, p.value, estimate, conf.low, conf.high) |> 
  ungroup()

cols_to_convert <- c("p.value", "estimate", "conf.low", "conf.high")
merged_estimates[cols_to_convert] <- lapply(merged_estimates[cols_to_convert],
                                            function(x) as.numeric(as.character(x)))

merged_estimates
```

#### Finding p-value and determining if the results are significant

```{r}
merged_estimates <- merged_estimates |> 
  mutate(q.value = p.adjust(p.value),
         is_significant = case_when(p.value <= 0.05 ~ "yes",
                                    p.value > 0.05 ~ "no"))

merged_estimates
```

#### Finding the genes which are significant

```{r}
merged_estimates |>
  filter(is_significant == "yes") |> 
  select(gene, p.value, q.value)
```

```{r}
merged_estimates |> 
  filter(is_significant == "yes") |> 
  ggplot(aes(x = estimate,
             y = fct_reorder(gene, estimate),
             xmin = conf.low,
             xmax = conf.high)) +
  geom_vline(xintercept = 0) +
  geom_errorbarh() +
  geom_point() +
  theme_minimal(base_size = 16) +
  theme(plot.title = element_text(hjust = 1, size = 11),
        axis.title = element_text(size = 10),
        axis.text = element_text(size = 5),
        plot.caption = element_text(size = 7)) +
  labs(x = "Estimates (95%CIs)",
       y = "",
       title = "Genes Associated with Smoking")
```

All significant values

```{r}
merged_estimates |> 
  filter(is_significant == "yes")
```

```{r}
merged_estimates |> 
  filter(gene %in% c("ilmn_1651278", "ilmn_1651375", "ilmn_1651767")) |> 
  ggplot(aes(x = estimate,
             y = fct_reorder(gene, estimate),
             xmin = conf.low,
             xmax = conf.high)) +
  geom_vline(xintercept = 0) +
  geom_errorbarh() +
  geom_point() +
  theme_minimal(base_size = 16) +
  theme(plot.title = element_text(hjust = 1, size = 11),
        axis.title = element_text(size = 10),
        axis.text = element_text(size = 5),
        plot.caption = element_text(size = 7)) +
  labs(x = "Estimates (95%CIs)",
       y = "",
       title = "Genes Associated with Smoking")
```

```{r}
merged_estimates |> 
  filter(is_significant == "yes") |> 
  sample_n(30) |> 
  ggplot(aes(x = estimate,
             y = fct_reorder(gene, estimate),
             xmin = conf.low,
             xmax = conf.high)) +
  geom_vline(xintercept = 0) +
  geom_errorbarh() +
  geom_point() +
  theme_minimal(base_size = 16) +
  theme(plot.title = element_text(hjust = 1, size = 11),
        axis.title = element_text(size = 10),
        axis.text = element_text(size = 5),
        plot.caption = element_text(size = 7)) +
  labs(x = "Estimates (95%CIs)",
       y = "",
       title = "Genes Associated with Smoking")
```

### Vulcano plot - Plotting of genes which are significant/not significant

```{r}
library("ggrepel")
pl <- merged_estimates |>
  mutate(lbl = case_when(
    is_significant == "yes" ~ gene,
    is_significant == "no" ~ "")) |> 
  ggplot(aes(x = estimate,
             y = -log10(p.value),
             colour = is_significant,
             label = lbl)) +
  geom_point(size = 1,
             alpha = 0.5) +
  geom_text_repel(size = 4,
                  max.overlaps = 20) +
  geom_hline(yintercept = 0) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 1),
    plot.subtitle = element_text(hjust = 1),
    legend.position = "none") +
  labs(
    x = "Estimates",
    y = "-log10(p)",
    title = "Volcano plot for down/up regulated genes with significance < 0.05",
    subtitle = "Genes highlighted in turquoise were significant after multiple testing correction",
    caption = "Data from DOI: ???")

pl
```
